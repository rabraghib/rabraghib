const ejs = require('ejs');
const fs = require('fs-extra');
const path = require('path');
const yargs = require('yargs');
const DATA = require('../content/data/_index');

const argv = yargs
  .option('output-path', {
    alias: 'o',
    description:
      'The full path for the new output directory, relative to the workspace root. By default, writes output to the root folder /',
    type: 'string'
  })
  .help()
  .alias('help', 'h').argv;

const TEMPLATES_PATH = path.resolve(__dirname, '../content/templates');
const OUTPUT_PATH = path.resolve(__dirname, '../', argv.outputPath || '.');

const templates = getAllFiles(TEMPLATES_PATH)
  .map(file => path.relative(TEMPLATES_PATH, file))
  .filter(file => file.endsWith('.ejs'));
templates.forEach(async template => {
  console.log(`Building ${template}`);
  const templatePath = path.resolve(TEMPLATES_PATH, template);
  const outputPath = path.resolve(OUTPUT_PATH, template.replace(/\.ejs$/, ''));
  const output = await ejs.renderFile(templatePath, {
    ...DATA,
    DONT_EDIT_WARNING: `! DO NOT EDIT THIS FILE. IT IS AUTOGENERATED.\nTo edit this file, make an edit to its template in \`${path
      .relative(path.dirname(outputPath), templatePath)
      .replace(/\\/g, '/')}\`.`
  });
  fs.ensureDirSync(path.dirname(outputPath), output);
  fs.writeFileSync(outputPath, output);
});

function getAllFiles(root, dir = root, results = []) {
  fs.readdirSync(dir).forEach(filePath => {
    filePath = dir + '/' + filePath;
    const stat = fs.statSync(filePath);
    if (stat && stat.isDirectory()) {
      results = [...results, ...getAllFiles(root, filePath, [...results])];
    } else {
      results.push(filePath);
    }
  });
  return results;
}
